{"version":3,"sources":["assets/mp3/Processed_White_Noise.mp3","assets/mp3/Whitenoise.wav","components/noiseTrack.js","components/slider/slider2.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NoiseTrack","props","audio","Audio","src","playAudio","volume","play","pauseAudio","pause","audioStatus","isPlaying","className","aria-hidden","onClick","name","VolumeSlider","type","min","max","value","id","onChange","change","App","state","audioTrack","soundFile2","vol","soundFile1","isOnPlayingMode","isOnPauseMode","playPauseToggleHandler","console","log","toggledIsPlaying","setState","changeVolumeSliderHandler","event","preventDefault","prevState","target","this","map","key","click","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mGAAAA,EAAOC,QAAU,IAA0B,mD,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gNC6B5BC,G,YAxBI,SAACC,GACf,IAAIC,EAAQ,IAAIC,MAAMF,EAAMG,KAErBC,EAAY,WACPH,EAAMI,OAASL,EAAMK,OACrBJ,EAAMK,QAGXC,EAAa,WAChBN,EAAMO,SAGFC,EAAcT,EAAMU,UAAYN,IAAcG,IAEvD,OACG,6BAEQ,uBAAGI,UAAU,yBAAyBC,cAAY,OAAOC,QAAST,IAClE,uBAAGS,QAAUN,GAAb,IAA2BP,EAAMc,MAC/BL,KCZFM,EATM,SAACf,GACtB,OACA,yBAAKW,UAAU,kBACb,2BAAOK,KAAK,QAAQC,IAAI,IAAIC,IAAI,KAAKC,MAAOnB,EAAMmB,MAAOR,UAAU,SAASS,GAAG,UAAUC,SAAUrB,EAAMsB,SACzG,2BAAItB,EAAMmB,S,gCC0GGI,E,4MAvGZC,MAAQ,CACLC,WAAY,CAAC,CACXL,GAAG,EACHN,KAAM,kBACNX,IAAKuB,IACLC,IAAM,IAER,CACEP,GAAG,EACHN,KAAM,kBACNX,IAAKyB,IACLD,IAAM,KAERE,iBAAkB,EAClBC,eAAgB,EAChBzB,OAAQ,G,EAGVJ,MAAQ,IAAIC,M,EAoCZ6B,uBAAwB,WACtBC,QAAQC,IAAR,2BAAgC,EAAKT,MAAMK,kBAC3C,IAAMK,GAAmB,EAAKV,MAAMK,gBACnC,EAAKM,SAAS,CACbN,gBAAiBK,K,EAKrBE,0BAA4B,SAACC,GAC3BA,EAAMC,iBACN,EAAKH,UAAS,SAAAI,GAAS,kCAClBA,GADkB,IAErBd,WAAW,2BACNc,EAAUd,YADL,IAERE,IAAMU,EAAMG,OAAOrB,aAIvBa,QAAQC,IAAI,sBAAwB,EAAKT,MAAMC,WAAWE,M,uDAIpD,IAAD,OACP,OACA,yBAAKhB,UAAU,OACb,4BAAQA,UAAU,cAAlB,UAGA,yBAAKA,UAAU,iBACV8B,KAAKjB,MAAMC,WAAWiB,KAAI,SAACzC,GAC5B,OACE,yBAAKU,UAAW,aAAagC,IAAO1C,EAAME,KACxC,kBAAC,EAAD,CACAW,KAAMb,EAAMa,KACZX,IAAMF,EAAME,IACZE,OAASJ,EAAM0B,IACfiB,MAAS,EAAKb,uBACdrB,UAAY,EAAKc,MAAMK,kBAEzB,kBAAC,EAAD,CAAcP,OAAU,EAAKc,0BAA2BjB,MAAO,EAAKK,MAAMC,WAAW,GAAGE,gB,GAhGlFkB,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.5f3fe6ed.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Processed_White_Noise.7d443c96.mp3\";","module.exports = __webpack_public_path__ + \"static/media/Whitenoise.8af88bf3.wav\";","import React  from 'react';\r\nimport './noiseTrack.css';\r\n\r\n\r\n\r\nconst NoiseTrack = (props) =>{\r\n     let audio = new Audio(props.src);\r\n\r\n      const playAudio = () => {                 \r\n                 audio.volume = props.volume   \r\n                 audio.play();         \r\n        }\r\n\r\n      const pauseAudio = () => {\r\n         audio.pause();\r\n      }\r\n\r\n       const audioStatus = props.isPlaying ? playAudio() : pauseAudio();\r\n     \r\n    return (            \r\n       <div \r\n       >             \r\n               <i className=\"fa fa-soundcloud fa-3x\" aria-hidden=\"true\" onClick={playAudio}   />\r\n               <p onClick ={pauseAudio}> {props.name}</p> \r\n                {audioStatus} \r\n                {/* { props.isPlaying ? audio.play() : audio.pause() }   */}\r\n       </div>    \r\n    );\r\n}\r\nexport default NoiseTrack;","import ReactSlider from 'react-slider';\r\nimport React from 'react';\r\n\r\nconst VolumeSlider = (props) =>{\r\nreturn (\r\n<div className=\"slidecontainer\">\r\n  <input type=\"range\" min=\"0\" max=\"10\" value={props.value} className=\"slider\" id=\"myRange\" onChange={props.change} />\r\n  <p>{props.value}</p>\r\n</div>\r\n)\r\n}\r\n\r\nexport default VolumeSlider;\r\n","import React,{Component} from 'react';\nimport './App.css';\nimport NoiseTrack from './components/noiseTrack'; \nimport VolumeSlider from './components/slider/slider2';\n\nimport soundFile1 from './assets/mp3/Processed_White_Noise.mp3';\nimport soundFile2 from './assets/mp3/Whitenoise.wav';\n\nclass App extends Component {\n\n   state = {\n      audioTrack :[{\n        id:1,\n        name: 'White-Noise.WAV',\n        src: soundFile2, \n        vol : 0.5\n      },\n      {\n        id:2,\n        name: 'White-Noise.MP3',\n        src: soundFile1,\n        vol : 0.2\n      }],\n      isOnPlayingMode : false,\n      isOnPauseMode : true,\n      volume: 5\n       }\n\n    audio = new Audio();\n\n    // playAudioHandler = () =>{\n    //   if(this.state.isOnPlayingMode){\n    //     this.audio.play();\n    //        this.setState({\n    //      isOnPlayingMode : false,\n    //      isOnPauseMode  : true\n    //    }) \n    //   }\n    //     else {\n    //       this.audio.pause();\n    //                  this.setState({\n    //        isOnPlayingMode : true,\n    //        isOnPauseMode  : false\n    //      })\n    //     }\n    //   }\n    \n\n  //  playAudioHandler = () => {\n  //     this.setState({\n  //        isOnPlayingMode : true,\n  //        isOnPauseMode  : false\n  //      })         \n  //   }\n\n\n  //    pauseAudioHandler = () => {\n  //          this.setState({\n  //          isOnPlayingMode : false,\n  //          isOnPauseMode  : true\n  //        })         \n  //     }\n\n\n    playPauseToggleHandler =() =>{\n      console.log(`state b4 handler ${this.state.isOnPlayingMode}`);\n      const toggledIsPlaying = this.state.isOnPlayingMode ? false : true;\n       this.setState({\n        isOnPlayingMode :toggledIsPlaying\n      })\n     \n    }   \n\n    changeVolumeSliderHandler = (event) => {\n      event.preventDefault();\n      this.setState(prevState => ({\n        ...prevState,\n        audioTrack:{\n          ...prevState.audioTrack,\n          vol : event.target.value\n        }\n      }))\n\n      console.log('from change handler' + this.state.audioTrack.vol)\n    }     \n\n\n  render() {   \n    return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n       Noisli\n      </header>\n      <div className=\"App-container\">\n          {this.state.audioTrack.map((audio) => {\n          return (\n            <div className =\"NoiseTrack\" key = {audio.src} >\n              <NoiseTrack  \n              name={audio.name} \n              src= {audio.src} \n              volume ={audio.vol}\n              click = {this.playPauseToggleHandler}  \n              isPlaying ={this.state.isOnPlayingMode}\n               />\n            <VolumeSlider change = {this.changeVolumeSliderHandler} value={this.state.audioTrack[0].vol} />\n              </div>\n             );                \n      })} \n    </div> \n    </div>\n  );\n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}